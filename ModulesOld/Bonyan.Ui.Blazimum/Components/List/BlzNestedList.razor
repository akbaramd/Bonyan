@namespace Bonyan.Ui.Blazimum
@using Bonyan.Ui.Blazimum.Components.List
@inherits ComponentBase

<div class="blz-list">
    @foreach (var item in Items)
    {
        <div class="blz-list-item" @key="item.Key">
            <!-- Header with expand/collapse icon or single item icon -->
            <div @onclick="() => OnItemClick(item)" class="blz-list-item-header">
                @if (item.Children.Any())
                {
                    <!-- Expand/Collapse icon with rotation for items with children -->
                    <span class="blz-expand-icon-container @(item.IsExpanded ? "rotate" : "")">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 256 256">
                            <path d="M208,96l-80,80L48,96Z" opacity="0.2"></path>
                            <path d="M215.39,92.94A8,8,0,0,0,208,88H48a8,8,0,0,0-5.66,13.66l80,80a8,8,0,0,0,11.32,0l80-80A8,8,0,0,0,215.39,92.94ZM128,164.69,67.31,104H188.69Z"></path>
                        </svg>
                    </span>
                }
                else
                {
                    <!-- Icon for single items without children -->
                    <span class="blz-single-item-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256">
                            <path d="M156,128a28,28,0,1,1-28-28A28,28,0,0,1,156,128Z"></path>
                        </svg>
                    </span>
                }
                <span class="blz-item-title">@item.Title</span>
            </div>

            <!-- Use BlzCollapsible only if the item has children -->
            @if (item.Children.Any())
            {
                <BlzCollapsible IsOpen="item.IsExpanded">
                    <BlzNestedList Items="item.Children" ActiveCondition="ActiveCondition" ItemClick="ItemClick" />
                </BlzCollapsible>
            }
        </div>
    }
</div>

@code {
    [Parameter] public List<ListItemModel> Items { get; set; } = new();

    [Parameter] public Func<Dictionary<string, object>, bool>? ActiveCondition { get; set; } // Condition to expand based on Meta

    [Parameter] public EventCallback<ListItemModel> ItemClick { get; set; } // Callback for item clicks

    protected override void OnInitialized()
    {
        // Apply the ActiveCondition on initialization
        if (ActiveCondition != null)
        {
            ApplyActiveCondition(Items);
        }
    }

    private async Task OnItemClick(ListItemModel item)
    {
        await ToggleExpandCollapse(item);
        await ItemClick.InvokeAsync(item); // Invoke the callback, passing the clicked item
    }

    private async Task ToggleExpandCollapse(ListItemModel item)
    {
        item.IsExpanded = !item.IsExpanded;

        if (!item.IsExpanded)
        {
            // If collapsing, collapse all child items recursively
            CollapseAllChildren(item);
        }

        await InvokeAsync(StateHasChanged); // Trigger a re-render
    }

    private void CollapseAllChildren(ListItemModel item)
    {
        foreach (var child in item.Children)
        {
            child.IsExpanded = false;
            if (child.Children.Any())
            {
                CollapseAllChildren(child); // Recursively collapse all children
            }
        }
    }

    private void ApplyActiveCondition(List<ListItemModel> items)
    {
        foreach (var item in items)
        {
            // Set IsExpanded based on the ActiveCondition
            if (ActiveCondition != null && ActiveCondition(item.Meta))
            {
                item.IsExpanded = true;
            }

            // Recursively apply to children
            if (item.Children.Any())
            {
                ApplyActiveCondition(item.Children);
            }
        }
    }
}
