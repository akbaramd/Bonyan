@using Bonyan.AspNetCore.Components
@using Bonyan.AspNetCore.Components.Menus
@using BonyanTemplate.Blazor.Consts
@inject IEnumerable<IMenuProvider> MenuProviders

<nav class="main-header navbar navbar-expand navbar-white navbar-light">
    <!-- Left navbar links -->
    <ul class="navbar-nav">
        <li class="nav-item">
            <a class="nav-link" data-widget="pushmenu" href="#" role="button">
                <i class="fas fa-bars"></i>
            </a>
        </li>

        @if (LeftNavbarMenus != null)
        {
            @foreach (var item in LeftNavbarMenus)
            {
                @RenderMenuItem(item, isRightAligned: false)
            }
        }
    </ul>

    <ul class="navbar-nav ml-auto">
        <!-- Navbar Search -->
        <li class="nav-item">
            <a class="nav-link" data-widget="navbar-search" href="#" role="button">
                <i class="fas fa-search"></i>
            </a>
            <div class="navbar-search-block">
                <form class="form-inline">
                    <div class="input-group input-group-sm">
                        <input class="form-control form-control-navbar" type="search" placeholder="جستجو" aria-label="Search">
                        <div class="input-group-append">
                            <button class="btn btn-navbar" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                            <button class="btn btn-navbar" type="button" data-widget="navbar-search">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </li>

        <!-- Messages Dropdown Menu -->
        <!-- Include message dropdown here -->

        <!-- Notifications Dropdown Menu -->
        <!-- Include notifications dropdown here -->

        <li class="nav-item">
            <a class="nav-link" data-widget="fullscreen" href="#" role="button">
                <i class="fas fa-expand-arrows-alt"></i>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-widget="control-sidebar" data-slide="true" href="#" role="button">
                <i class="fas fa-th-large"></i>
            </a>
        </li>
    </ul>
</nav>

@code {
    private List<MenuItem> LeftNavbarMenus;

    protected override void OnInitialized()
    {
        var allNavbarMenus = new List<MenuItem>();

        foreach (var provider in MenuProviders)
        {
            var items = provider.GetMenuItems(AdminLteMenuConst.NavbarMenu);
            if (items != null)
            {
                allNavbarMenus.AddRange(items);
            }
        }

// Sort the menus based on the Order property
        allNavbarMenus = allNavbarMenus.OrderBy(m => m.Order).ToList();

// Optionally, sort child menu items
        foreach (var menuItem in allNavbarMenus)
        {
            if (menuItem.Children != null && menuItem.Children.Any())
            {
                menuItem.Children = menuItem.Children.OrderBy(c => c.Order).ToList();
            }
        }

// Split menus into left and right aligned menus based on MetaData or other criteria
        LeftNavbarMenus = allNavbarMenus.Where(m => !IsRightAligned(m)).ToList();
    }

    private bool IsRightAligned(MenuItem item)
    {
// You can decide based on MetaData or any other property
        if (item.MetaData.TryGetValue("align", out var align))
        {
            return align.Equals("right", StringComparison.OrdinalIgnoreCase);
        }

        return false; // Default alignment is left
    }

    RenderFragment RenderMenuItem(MenuItem item, bool isRightAligned) => builder =>
    {

        int seq = 0;

// Render dropdown menu if there are children
        if (item.Children != null && item.Children.Any())
        {
            builder.OpenElement(seq++, "li");
            builder.AddAttribute(seq++, "class", "nav-item dropdown");

            builder.OpenElement(seq++, "a");
            builder.AddAttribute(seq++, "class", "nav-link dropdown-toggle");
            builder.AddAttribute(seq++, "href", "#");
            builder.AddAttribute(seq++, "id", $"{item.Title}-dropdown");
            builder.AddAttribute(seq++, "role", "button");
            builder.AddAttribute(seq++, "data-toggle", "dropdown");
            builder.AddAttribute(seq++, "aria-haspopup", "true");
            builder.AddAttribute(seq++, "aria-expanded", "false");

            if (!string.IsNullOrEmpty(item.Icon))
            {
                builder.OpenElement(seq++, "i");
                builder.AddAttribute(seq++, "class", item.Icon);
                builder.CloseElement(); // Close <i>
                builder.AddContent(seq++, " ");
            }

            builder.AddContent(seq++, item.Title);
            builder.CloseElement(); // Close <a>

            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "dropdown-menu");
            builder.AddAttribute(seq++, "aria-labelledby", $"{item.Title}-dropdown");

            foreach (var child in item.Children)
            {
                builder.AddContent(seq++, RenderDropdownItem(child));
            }

            builder.CloseElement(); // Close <div>
            builder.CloseElement(); // Close <li>
        }
        else
        {
// Render single menu item
            builder.OpenElement(seq++, "li");
            builder.AddAttribute(seq++, "class", "nav-item");

            builder.OpenComponent<NavLink>(seq++);
            builder.AddAttribute(seq++, "class", "nav-link");
            builder.AddAttribute(seq++, "href", item.Url);
            builder.AddAttribute(seq++, "ChildContent", (RenderFragment)(childBuilder =>
            {
                int childSeq = 0;

                if (!string.IsNullOrEmpty(item.Icon))
                {
                    childBuilder.OpenElement(childSeq++, "i");
                    childBuilder.AddAttribute(childSeq++, "class", item.Icon);
                    childBuilder.CloseElement(); // Close <i>
                    childBuilder.AddContent(childSeq++, " ");
                }

                childBuilder.AddContent(childSeq++, item.Title);
            }));
            builder.CloseComponent(); // Close NavLink

            builder.CloseElement(); // Close <li>
        }
    };

    RenderFragment RenderDropdownItem(MenuItem item) => builder =>
    {
        int seq = 0;
        builder.OpenElement(seq++, "a");
        builder.AddAttribute(seq++, "class", "dropdown-item");
        builder.AddAttribute(seq++, "href", item.Url);

        if (!string.IsNullOrEmpty(item.Icon))
        {
            builder.OpenElement(seq++, "i");
            builder.AddAttribute(seq++, "class", item.Icon);
            builder.CloseElement(); // Close <i>
            builder.AddContent(seq++, " ");
        }

        builder.AddContent(seq++, item.Title);
        builder.CloseElement(); // Close <a>
    };

}