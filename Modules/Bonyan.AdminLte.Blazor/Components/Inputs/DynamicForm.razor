@using System.Linq.Expressions
@typeparam TModel

<form method="post" @onsubmit="HandleSubmit" @formname="@typeof(TModel).FullName">
    <AntiforgeryToken/>
    @foreach (var property in typeof(TModel).GetProperties())
    {
        var label = property.Name;
        var placeholder = "";
        var icon = "";
        var isPassword = false;

        // Check for custom attributes
        var inputAttr = property.GetCustomAttributes(typeof(InputFieldAttribute), false).FirstOrDefault() as InputFieldAttribute;
        if (inputAttr != null)
        {
            label = inputAttr.Label ?? property.Name;
            placeholder = inputAttr.Placeholder ?? "";
            icon = inputAttr.Icon ?? "";
            isPassword = inputAttr.IsPassword;
        }

        // Render the appropriate input type based on the property type
        if (property.PropertyType == typeof(string))
        {
            <BonLteInputText
                Value="@(GetTypedValue<string>(property))"
                ValueChanged="@(EventCallback.Factory.Create<string>(this, value => SetTypedValue(property, value)))"
                ValueExpression="@(CreateValueExpression<string>(property))"
                Type="@(isPassword ? "password" : "text")"
                Placeholder="@placeholder"
                Icon="@icon"
                Label="@label"
                Required="true" />
        }
        else if (property.PropertyType == typeof(bool))
        {
            <div class="form-check">
                <InputCheckbox
                    Value="@(GetTypedValue<bool>(property))"
                    ValueChanged="@(EventCallback.Factory.Create<bool>(this, value => SetTypedValue(property, value)))"
                    ValueExpression="@(CreateValueExpression<bool>(property))"
                    class="form-check-input" />
                <label class="form-check-label">@label</label>
            </div>
        }
        else if (property.PropertyType == typeof(int))
        {
            <InputNumber
                Value="@(GetTypedValue<int>(property))"
                ValueChanged="@(EventCallback.Factory.Create<int>(this, value => SetTypedValue(property, value)))"
                ValueExpression="@(CreateValueExpression<int>(property))"
                class="form-control"
                placeholder="@placeholder" />
        }
        else if (property.PropertyType == typeof(double) || property.PropertyType == typeof(decimal))
        {
            <InputNumber
                Value="@(GetTypedValue<double>(property))"
                ValueChanged="@(EventCallback.Factory.Create<double>(this, value => SetTypedValue(property, Convert.ChangeType(value, property.PropertyType))))"
                ValueExpression="@(CreateValueExpression<double>(property))"
                class="form-control"
                placeholder="@placeholder" />
        }
        else
        {
            <p>Unsupported property type: @property.PropertyType.Name</p>
        }
    }

    <div class="row mt-3">
        <div class="col-4">
            <button type="submit" class="btn btn-primary btn-block">Submit</button>
        </div>
    </div>
</form>

@code {
    [SupplyParameterFromForm]
    private TModel Model { get; set; } = Activator.CreateInstance<TModel>();

    [Parameter] public EventCallback<TModel> OnSubmit { get; set; }

    // Retrieve the value for the specified property, casting to the specified type
    private TValue GetTypedValue<TValue>(System.Reflection.PropertyInfo property)
    {
        return (TValue)property.GetValue(Model);
    }

    // Set the value for the specified property
    private void SetTypedValue<TValue>(System.Reflection.PropertyInfo property, TValue value)
    {
        property.SetValue(Model, value);
    }

    // Create a ValueExpression for the specified property to allow Blazor's data-binding system to work correctly
    private Expression<Func<TValue>> CreateValueExpression<TValue>(System.Reflection.PropertyInfo property)
    {
        // Create a constant expression for the Model instance
        var modelConstant = Expression.Constant(Model);
        var propertyAccess = Expression.Property(modelConstant, property);
        return Expression.Lambda<Func<TValue>>(propertyAccess);
    }

    private async Task HandleSubmit()
    {
        // Invoke the OnSubmit callback with the dynamically populated Model
        await OnSubmit.InvokeAsync(Model);
    }
}
